@page "/productos/edit"
@using Microsoft.EntityFrameworkCore
@using PracticaClase.Models
@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Producto</h2>
<hr />
@if (Producto is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Producto" OnValidSubmit="UpdateProducto" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Producto.Codigo" value="@Producto.Codigo" />
                <div class="mb-3">
                    <label for="descripcion" class="form-label">Descripcion:</label>
                    <InputText id="descripcion" @bind-Value="Producto.Descripcion" class="form-control" />
                    <ValidationMessage For="() => Producto.Descripcion" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="precio" class="form-label">Precio:</label>
                    <InputNumber id="precio" @bind-Value="Producto.Precio" class="form-control" />
                    <ValidationMessage For="() => Producto.Precio" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="existencia" class="form-label">Existencia:</label>
                    <InputNumber id="existencia" @bind-Value="Producto.Existencia" class="form-control" />
                    <ValidationMessage For="() => Producto.Existencia" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="iva" class="form-label">Iva:</label>
                    <InputNumber id="iva" @bind-Value="Producto.Iva" class="form-control" />
                    <ValidationMessage For="() => Producto.Iva" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="proveedorcodigo" class="form-label">ProveedorCodigo:</label>
                    <InputNumber id="proveedorcodigo" @bind-Value="Producto.ProveedorCodigo" class="form-control" />
                    <ValidationMessage For="() => Producto.ProveedorCodigo" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/productos">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Codigo { get; set; }

    [SupplyParameterFromForm]
    private Producto? Producto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Producto ??= await context.Productos.FirstOrDefaultAsync(m => m.Codigo == Codigo);

        if (Producto is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateProducto()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Producto!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProductoExists(Producto!.Codigo))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/productos");
    }

    private bool ProductoExists(int codigo)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Productos.Any(e => e.Codigo == codigo);
    }
}
