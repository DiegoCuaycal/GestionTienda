@page "/proveedors/delete"
@using Microsoft.EntityFrameworkCore
@using PracticaClase.Models
@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Proveedor</h2>
    <hr />
    @if (proveedor is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">RazonSocial</dt>
            <dd class="col-sm-10">@proveedor.RazonSocial</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Direccion</dt>
            <dd class="col-sm-10">@proveedor.Direccion</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Telefono</dt>
            <dd class="col-sm-10">@proveedor.Telefono</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Ruc</dt>
            <dd class="col-sm-10">@proveedor.Ruc</dd>
        </dl>
        <EditForm method="post" Model="proveedor" OnValidSubmit="DeleteProveedor" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(proveedor is null)">Delete</button> |
            <a href="/proveedors">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Proveedor? proveedor;

    [SupplyParameterFromQuery]
    private int Codigo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        proveedor = await context.Proveedores.FirstOrDefaultAsync(m => m.Codigo == Codigo);

        if (proveedor is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteProveedor()
    {
        using var context = DbFactory.CreateDbContext();
        context.Proveedores.Remove(proveedor!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/proveedors");
    }
}
