@page "/proveedors/edit"
@using Microsoft.EntityFrameworkCore
@using PracticaClase.Models
@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Proveedor</h2>
<hr />
@if (Proveedor is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Proveedor" OnValidSubmit="UpdateProveedor" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Proveedor.Codigo" value="@Proveedor.Codigo" />
                <div class="mb-3">
                    <label for="razonsocial" class="form-label">RazonSocial:</label>
                    <InputText id="razonsocial" @bind-Value="Proveedor.RazonSocial" class="form-control" />
                    <ValidationMessage For="() => Proveedor.RazonSocial" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="direccion" class="form-label">Direccion:</label>
                    <InputText id="direccion" @bind-Value="Proveedor.Direccion" class="form-control" />
                    <ValidationMessage For="() => Proveedor.Direccion" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="telefono" class="form-label">Telefono:</label>
                    <InputText id="telefono" @bind-Value="Proveedor.Telefono" class="form-control" />
                    <ValidationMessage For="() => Proveedor.Telefono" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="ruc" class="form-label">Ruc:</label>
                    <InputNumber id="ruc" @bind-Value="Proveedor.Ruc" class="form-control" />
                    <ValidationMessage For="() => Proveedor.Ruc" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/proveedors">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Codigo { get; set; }

    [SupplyParameterFromForm]
    private Proveedor? Proveedor { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Proveedor ??= await context.Proveedores.FirstOrDefaultAsync(m => m.Codigo == Codigo);

        if (Proveedor is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateProveedor()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Proveedor!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProveedorExists(Proveedor!.Codigo))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/proveedors");
    }

    private bool ProveedorExists(int codigo)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Proveedores.Any(e => e.Codigo == codigo);
    }
}
